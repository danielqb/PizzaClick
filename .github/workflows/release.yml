name: Docker Image CI

on:
  push:
    branches: [ "main", "dev", "actions"]
  pull_request:
    branches: [ "main", "dev", "actions"]

jobs:

  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    
    # Run pylint analysis
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint psycopg psycopg2 django
    - name: Analysing the code with pylint
      run: |
        pylint $(git ls-files '*.py')
    # Run flake8 linting analysis
    - name: Run Linting
      run: |
        pip install flake8
        flake8 --exclude=migrations,.venv .

    # Run tests
    # - name: Run Tests
    #   run: |
    #     pip install -r requirements.txt
    #     pytest

# Build Docker image
    - name: Build the Docker image
      run: docker build --file Dockerfile -t pizza-click:${{ github.sha }} .

    # Scan Docker image for vulnerabilities
    - name: Scan Docker image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: pizza-click:${{ github.sha }}

    # Get Helm chart version
    - name: Get Helm chart version
      id: get_version
      run: echo "VERSION=$(grep '^version:' helm/Chart.yaml | awk '{print $2}')" >> $GITHUB_ENV
      
    # Build Helm packed
    - name: Build Helm packed
      run: helm package helm/
      
    # - name: Create Git Release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: "Commit message: ${{ github.event.head_commit.message }}"
    #     draft: false
    #     prerelease: false

    # - name: Upload Release Asset
    #   id: upload-release-asset
    #   uses: sekwah41/upload-release-assets@v1.1.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./*.tgz
    #     asset_name: pizzaclick-${{ env.VERSION }}.tgz
    #     asset_content_type: application/gzip

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    # Push Docker image to registry
    - name: Push Docker image to registry
      run: docker push pizza-click:${{ github.sha }}
